'use strict';
var test = require('tape');
var SimpleWebRTC = require('../simplewebrtc');

test('End-to-End test with two peers', function (t) {
    var opts = {
        url: 'https://signaling.simplewebrtc.com:443/',
        localVideoEl: null,
        remoteVideosEl: null,
        socketio: {'force new connection': true},
        autoRequestMedia: true,
        media: {audio: false, video: true}
    };
    var clientA = new SimpleWebRTC(opts);
    var clientB;

    var room = 'test_' + Math.floor(Math.random() * 10000);
    clientA.on('readyToCall', function () {
        t.pass('clientA ready to call');
        clientA.joinRoom(room, function (err) {
            if (err) {
                t.err('clientA error joining');
                return;
            }
            t.pass('clientA joined');
            clientB = new SimpleWebRTC(opts);
            clientB.on('readyToCall', function () {
                t.pass('clientB ready to call');
                clientB.joinRoom(room, function (err) {
                    if (err) {
                        t.err('clientB error joining');
                        return;
                    }
                });
                t.pass('clientB joined');
            });

            clientA.on('createdPeer', function (peer) {
                t.ok(peer.id === clientB.connection.getSessionid(),
                     'clientA got connected by clientB');
                peer.pc.on('iceConnectionStateChange', function () {
                    switch (peer.pc.iceConnectionState) {
                    case 'connected':
                        t.pass('p2p connetion established');
                        clientA.disconnect();
                        clientB.disconnect();
                        t.end();
                        break;
                    }
                });
            });
        });
    });
});

